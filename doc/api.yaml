openapi: 3.0.3
info:
  title: WASAtext API
  description: |-
    APIs required for WASAtext.
  version: "1.0.0"
tags:
  - name: Login and Registration
    description: Authentication and user management operations
  - name: Home
    description: Main screen operations
  - name: User Profile
    description: User profile management operations
  - name: Chat
    description: Chat and message operations
  - name: Group Management
    description: Group management operations
  - name: Group Creation
    description: Group creation operations
  - name: Private Conversation Creation
    description: Private conversation creation operations
security:
  - bearerAuth: []

paths:
  /check/{chat}:
      parameters:
      - name: chat
        in: path
        required: true
        description: Group ID
        schema:
          type: integer
          example: 2
          minimum: 1
          maximum: 1024
      get:
        tags: ["Group Creation"]
        summary: "Check if a chat is a group (isGroup)"
        description: |-
          Returns true if the chat in the URL is a group, otherwise returns false
        operationId: isGroup
        responses:
          "200":
            description: Response successfully retrieved
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResponseIsGroup'
          "400":
            description: Client error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
          "404":
            description: Chat not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
          "500":
            description: Server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
  /wasachat:
    post:
      tags: ["Login and Registration"]
      summary: "User login (doLogin)"
      description: |-
        If the user does not exist, they are registered automatically.
        If the user exists, the login is performed.
      operationId: doLogin
      requestBody:
        description: User credentials (name)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '201':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Client-side error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '404':
          description: Username not found in database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /wasachat/{user}:
    parameters:
    - name: user
      in: path
      required: true
      description: username
      schema:
        type: string
        example: "Carlo"
        minLength: 1
        maxLength: 1024
        pattern: '^[a-zA-Z0-9._~-]+$'
    get:
      tags: ["User Profile"]
      summary: "get id from NIckname (idFromName)"
      description: |-
        Returns id of an user from his nickname.
      operationId: idFromName
      responses:
        "200":
          description: Home screen displayed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/idFromNameResponse'
        "400":
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /wasachat/{user}/chats:
    parameters:
    - name: user
      in: path
      required: true
      description: username
      schema:
        type: string
        example: "Carlo"
        minLength: 1
        maxLength: 1024
        pattern: '^[a-zA-Z0-9._~-]+$'
    get:
      tags: ["Home"]
      summary: "View conversations (getMyConversations)"
      description: |-
        Returns the list of the user's conversations
        in reverse chronological order.
      operationId: getMyConversations
      responses:
        "200":
          description: Home screen displayed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationsResponse'
              example:
                chats:
                  - chat_id: 21
                    name: "Computer Science 2024-2025"
                    photo: "base64encodedimagedaskjhdkjashdkjahkdjhakjhdakjhdaksjk--"
                    time: "2025-03-15T14:30:00Z"
                    last_snippet: "AE"
                    is_group: false
        "400":
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /wasachat/{user}/usersettings/name:
    parameters:
    - name: user
      in: path
      required: true
      description: username
      schema:
        type: string
        example: "Carlo"
        minLength: 1
        maxLength: 1024
        pattern: '^[a-zA-Z0-9._~-]+$'
    put:
      tags: ["User Profile"]
      summary: "Update username (setMyUserName)"
      description: |-
        Updates the username.
      operationId: setMyUserName
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NameRequest'
        required: true
      responses:
        "200":
          description: Username updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        "202":
          description: Username unchanged (same as previous)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        "400":
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /wasachat/{user}/usersettings/photo:
    parameters:
    - name: user
      in: path
      required: true
      description: username
      schema:
        type: string
        example: "Carlo"
        minLength: 1
        maxLength: 1024
        pattern: '^[a-zA-Z0-9._~-]+$'
    put:
      tags: ["User Profile"]
      summary: "Update profile photo (setMyPhoto)"
      description: |-
        Sets or updates the user's profile picture.
      operationId: setMyPhoto
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhotoRequest'
        required: true
      responses:
        "200":
          description: Profile picture updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        "400":
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /wasachat/{user}/privateconversation:
    parameters:
    - name: user
      in: path
      required: true
      description: username
      schema:
        type: string
        example: "Carlo"
        minLength: 1
        maxLength: 1024
        pattern: '^[a-zA-Z0-9._~-]+$'
    post:
      tags: ["Private Conversation Creation"]
      summary: "Create private conversation (createPrivateConversation)"
      description: |-
        Creates a new private conversation between the specified user and another user.
      operationId: createPrivateConversation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivateConversationRequest'
        required: true
      responses:
        "200":
          description: Private conversation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        "202":
          description: Private conversation already exists between these users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "400":
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /wasachat/{user}/groups/{chat}/add:
    parameters:
    - name: user
      in: path
      required: true
      description: username
      schema:
        type: string
        example: "Carlo"
        minLength: 1
        maxLength: 1024
        pattern: '^[a-zA-Z0-9._~-]+$'
    - name: chat
      in: path
      required: true
      description: Group ID
      schema:
        type: integer
        example: 2
        minimum: 1
        maximum: 1024
    put:
      tags: ["Group Management"]
      summary: "Add user to group (addToGroup)"
      description: |-
        Adds a user to the specified group.
      operationId: addToGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserRequest'
        required: true
      responses:
        "200":
          description: User added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        "202":
          description: User already in group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "400":
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: User or group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /wasachat/{user}/chats/{chat}:
    parameters:
    - name: user
      in: path
      required: true
      description: username
      schema:
        type: string
        example: "Carlo"
        minLength: 1
        maxLength: 1024
        pattern: '^[a-zA-Z0-9._~-]+$'
    - name: chat
      in: path
      required: true
      description: Group ID
      schema:
        type: integer
        example: 2
        minimum: 1
        maximum: 1024
    get:
      tags: ["Chat"]
      summary: "Get chat messages (getConversation)"
      description: |-
        Returns messages from the specified chat.
      operationId: getConversation
      responses:
        "200":
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessageResponse'
        "400":
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: Chat not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
    post:
      tags: ["Chat"]
      summary: "Send message (sendMessage)"
      description: |-
        Sends a message to the specified chat.
      operationId: sendMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequest'
        required: true
      responses:
        "200":
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        "400":
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: Chat not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
    delete:
      tags: ["Group Management"]
      summary: "Leave group (leaveGroup)"
      description: |-
        The user leaves the specified group.
      operationId: leaveGroup
      responses:
        "200":
          description: Successfully left the group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        "400":
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /wasachat/{user}/forw/{target}/messages/{message}:
    parameters:
    - name: user
      in: path
      required: true
      description: Username
      schema:
        type: string
        example: "Carlo"
        minLength: 1
        maxLength: 1024
        pattern: '^[a-zA-Z0-9._~-]+$'
    - name: target
      in: path
      required: true
      description: Target chat ID
      schema:
        type: integer
        example: 2
        minimum: 1
        maximum: 1024
    - name: message
      in: path
      required: true
      description: ID of the message to forward
      schema:
        type: integer
        example: 2
        minimum: 1
        maximum: 1024
    post:
      tags: ["Chat"]
      summary: "Forward message (forwardMessage)"
      description: |-
        Forwards a message to another chat.
      operationId: forwardMessage
      responses:
        "200":
          description: Message forwarded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        "400":
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: Message or chat not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /wasachat/{user}/forwnew/{target}/messages/{message}:
    parameters:
    - name: user
      in: path
      required: true
      description: Username
      schema:
        type: string
        example: "Carlo"
        minLength: 1
        maxLength: 1024
        pattern: '^[a-zA-Z0-9._~-]+$'
    - name: target
      in: path
      required: true
      description: Target chat ID
      schema:
        type: integer
        example: 2
        minimum: 1
        maximum: 1024
    - name: message
      in: path
      required: true
      description: ID of the message to forward
      schema:
        type: integer
        example: 2
        minimum: 1
        maximum: 1024
    post:
      tags: ["Chat"]
      summary: "Forward message to new chat (forwardMessageToNewChat)"
      description: |-
        Forwards a message to a new, non-existing chat.
      operationId: forwardMessageToNewChat
      responses:
        "200":
          description: Message forwarded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        "400":
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /wasachat/{user}/chats/{chat}/messages/{message}:
    parameters:
    - name: user
      in: path
      required: true
      description: username
      schema:
        type: string
        example: "Carlo"
        minLength: 1
        maxLength: 1024
        pattern: '^[a-zA-Z0-9._~-]+$'
    - name: chat
      in: path
      required: true
      description: Group ID
      schema:
        type: integer
        example: 2
        minimum: 1
        maximum: 1024
    - name: message
      in: path
      required: true
      description: ID of the message to forward
      schema:
        type: integer
        example: 2
        minimum: 1
        maximum: 1024
    post:
      tags: ["Chat"]
      summary: "Reply to message (ansMessage)"
      description: |-
        Replies to an existing message in a chat.
      operationId: ansMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequest'
        required: true
      responses:
        "200":
          description: Reply added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        "400":
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: Message or chat not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
    delete:
      tags: ["Chat"]
      summary: Elimina Message (deleteMessage)
      description: |-
        Elimina un Message dalla chat.
      operationId: deleteMessage
      responses:
        "200":
          description: Message eliminato con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        "400":
          description: Errore lato client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: Message non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: Errore interno del server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /wasachat/{user}/usercheck/groups/{group}:     
    parameters:
    - name: user
      in: path
      required: true
      description: username
      schema:
        type: string
        example: "Carlo"
        minLength: 1
        maxLength: 1024
        pattern: '^[a-zA-Z0-9._~-]+$'
    - name: group
      in: path
      required: true
      description: Chat ID
      schema:
        type: number
        example: 2
        minimum: 1
        maximum: 1024
    get:
      tags: ["Chat"]
      summary: "Get group members (usersInGroup)"
      description: |-
        Retrieves the list of users present in the group.
      operationId: usersInGroup
      responses:
        "200":
          description: Group members retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "400":
          description: Client error - user doesn't have access to the group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /wasachat/{user}/messages/{message}:
    parameters:
    - name: user
      in: path
      required: true
      description: username
      schema:
        type: string
        example: "Carlo"
        minLength: 1
        maxLength: 1024
        pattern: '^[a-zA-Z0-9._~-]+$'
    - name: message
      in: path
      required: true
      description: ID of the message to forward
      schema:
        type: integer
        example: 2
        minimum: 1
        maximum: 1024
    post:
      tags: ["Chat"]
      summary: "Comment on message (commentMessage)"
      description: |-
        Adds a comment to an existing message.
      operationId: commentMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
        required: true
      responses:
        "200":
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        "400":
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
    delete:
      tags: ["Chat"]
      summary: "Delete comment (deleteComment)"
      description: |-
        Removes a comment from a message.
      operationId: deleteComment
      responses:
        "200":
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        "400":
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /wasachat/{user}/groups:
    parameters:
    - name: user
      in: path
      required: true
      description: username
      schema:
        type: string
        example: "Carlo"
        minLength: 1
        maxLength: 1024
        pattern: '^[a-zA-Z0-9._~-]+$'
    post:
      tags: ["Group Creation"]
      summary: "Create group (createGroup)"
      description: |-
        Creates a new group with the specified name.
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupNameRequest'
        required: true
      responses:
        "200":
          description: Group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        "400":
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /wasachat/{user}/groups/{chat}/name:
    parameters:
    - name: user
      in: path
      required: true
      description: username
      schema:
        type: string
        example: "Carlo"
        minLength: 1
        maxLength: 1024
        pattern: '^[a-zA-Z0-9._~-]+$'
    - name: chat
      in: path
      required: true
      description: Group ID
      schema:
        type: integer
        example: 2
        minimum: 1
        maximum: 1024
    put:
      tags: ["Group Management"]
      summary: "Update group name (setGroupName)"
      description: |-
        Updates the name of the specified group.
      operationId: setGroupName
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreationRequest'
        required: true
      responses:
        "200":
          description: Group name updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        "400":
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /wasachat/{user}/groups/{chat}/photo:
    parameters:
    - name: user
      in: path
      required: true
      description: username
      schema:
        type: string
        example: "Carlo"
        minLength: 1
        maxLength: 1024
        pattern: '^[a-zA-Z0-9._~-]+$'
    - name: chat
      in: path
      required: true
      description: Group ID
      schema:
        type: integer
        example: 2
        minimum: 1
        maximum: 1024
    put:
      tags: ["Group Management"]
      summary: "Update group photo (setGroupPhoto)"
      description: |-
        Updates the photo for the specified group.
      operationId: setGroupPhoto
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupPhotoRequest'
        required: true
      responses:
        "200":
          description: Group photo updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        "400":
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'

components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
    LoginRequest:
      type: object
      description: Required login credentials
      required:
        - name
      properties:
        name:
          type: string
          description: Username for login
          example: "Carlo"
          minLength: 1
          maxLength: 50
          pattern: '^.*$'

    ResponseIsGroup:
      type: object
      description: Indicates if the conversation is a group and optionally includes the group ID
      required:
        - is_group
      properties:
        is_group:
          type: boolean
          description: Indicates if the conversation is a group
        group_id:
          type: integer
          format: int64
          description: Group ID (present only if it's a group)
          minimum: 1
          maximum: 1024

    ConversationsResponse:
      description: List of user's conversations
      required:
        - chats
      properties:
        chats:
          type: array
          description: List of conversations
          minItems: 0
          maxItems: 1024
          items:
            $ref: '#/components/schemas/Conversation'

    Conversation:
      type: object
      description: Details of a single conversation
      required:
        - name
        - time
        - is_group
      properties:
        chat_id:
          type: integer
          description: Unique chat ID
          example: 21
          minimum: 1
          maximum: 1024
        name:
          type: string
          description: Conversation name
          example: "james"
          minLength: 1
          maxLength: 100
          pattern: '^.*$'
        photo:
          type: string
          description: Base64 encoded photo content
          example: "fasfgasdkjfvashfadsfvhjfasfbashbvdfj--"
          minLength: 1
          maxLength: 1024
          pattern: '^.*$'
        time:
          type: string
          format: date-time
          description: Timestamp of last message in ISO 8601 format
          minLength: 20
          maxLength: 30
          pattern: '^.*$'
        lastsnip:
          type: string
          description: Preview of the last message
          example: "AE"
          minLength: 0
          maxLength: 1000
          pattern: '^.*$'
        lastphoto:
          type: string
          description: Base64 content of last message's photo
          example: "fasfgasdkjfvashfadsfvhjfasfbashbvdfj--"
          minLength: 1
          maxLength: 1024
          pattern: '^.*$'
        is_group:
          type: boolean
          description: Indicates if this is a group chat
          example: false

    NameRequest:
      type: object
      description: Request to change username
      required:
        - name
      properties:
        name:
          type: string
          description: New username
          example: "james"
          minLength: 1
          maxLength: 100
          pattern: '^.*$'

    PhotoRequest:
      type: object
      description: Request to change profile picture
      required:
        - photo
      properties:
        photo:
          type: string
          description: Base64 encoded photo content
          example: "fasfgasdkjfvashfadsfvhjfasfbashbvdfj--"
          minLength: 1
          maxLength: 1024
          pattern: '^.*$'

    AddUserRequest:
      type: object
      description: Request to add user to group
      required:
        - user_to_add
      properties:
        user_to_add:
          type: string
          description: Nickname of user to add
          example: "Luigi"
          minLength: 1
          maxLength: 1024
          pattern: '^.*$'

    ChatMessageResponse:
      type: object
      description: List of messages in a chat
      required:
        - messages
      properties:
        messages:
          type: array
          description: List of messages
          minItems: 0
          maxItems: 1024
          items:
            $ref: '#/components/schemas/Message'

    UserResponse:
      type: object
      description: List of users in a group
      required:
        - users
      properties:
        users:
          type: array
          description: List of group members
          minItems: 0
          maxItems: 1024
          items:
            $ref: '#/components/schemas/User'

    User:
      type: object
      description: User details including name and profile picture
      required:
        - name
        - photo
      properties:
        name:
          type: string
          description: Username
          example: "james"
          minLength: 1
          maxLength: 100
          pattern: '^.*$'
        photo:
          type: string
          description: Base64 encoded profile picture
          example: "fasfgasdkjfvashfadsfvhjfasfbashbvdfj--"
          minLength: 1
          maxLength: 1024
          pattern: '^.*$'

    Message:
      type: object
      description: Details of a single message
      required:
        - message_id
        - author
        - idauthor
        - time
        - rec
        - read
        - comments
        - forw
      properties:
        message_id:
          type: integer
          description: Unique message ID
          example: 12
          minimum: 1
          maximum: 1024
        author:
          type: string
          description: Author's nickname
          example: "Marcolino"
          minLength: 1
          maxLength: 50
          pattern: '^.*$'
        idauthor:
          type: integer
          description: Unique author ID
          example: 2
          minimum: 1
          maximum: 1024
        text:
          type: string
          description: Message text content
          example: "Are you free on Saturday?"
          minLength: 1
          maxLength: 1000
          pattern: '^.*$'
        photo:
          type: string
          description: Base64 encoded photo content
          example: "fasfgasdkjfvashfadsfvhjfasfbashbvdfj--"
          minLength: 1
          maxLength: 1024
          pattern: '^.*$'
        time:
          type: string
          format: date-time
          description: Message timestamp in ISO 8601 format
          example: "2025-03-15T14:30:00Z"
          minLength: 20
          maxLength: 30
          pattern: '^.*$'
        rec:
          type: boolean
          description: Indicates if message was received
          example: true
        read:
          type: boolean
          description: Indicates if message was read
          example: false
        comments:
          type: array
          description: List of message comments
          minItems: 0
          maxItems: 100
          items:
            $ref: '#/components/schemas/Comment'
        forw:
          type: boolean
          description: Indicates if message was forwarded
          example: true
        ans:
          type: integer
          description: ID of message being replied to
          example: 9
          minimum: 1
          maximum: 1024

    MessageRequest:
      type: object
      description: Request to send a message
      properties:
        text:
          type: string
          description: Message text content
          example: "Would you like to go out this Friday?"
          minLength: 1
          maxLength: 1000
          pattern: '^.*$'
        photo:
          type: string
          description: Base64 encoded photo content
          example: "fasfgasdkjfvashfadsfvhjfasfbashbvdfj--"
          minLength: 1
          maxLength: 1024
          pattern: '^.*$'

    CommentRequest:
      type: object
      description: Request to add a comment
      required:
        - comment
      properties:
        comment:
          type: string
          description: Comment content (emoji)
          example: "pollice in su"
          minLength: 1
          maxLength: 1000
          pattern: '^.*$'

    Comment:
      type: object
      description: Details of a single comment
      required:
        - comment_id
        - author
        - idauthor
        - reaction
      properties:
        comment_id:
          type: integer
          description: Unique comment ID
          example: 2
          minimum: 1
          maximum: 1024
        author:
          type: string
          description: Author's nickname
          example: "Marcolino"
          minLength: 1
          maxLength: 50
          pattern: '^.*$'
        idauthor:
          type: integer
          description: Unique author ID
          example: 2
          minimum: 1
          maximum: 1024
        reaction:
          type: string
          description: Comment content (emoji or short text)
          example: "pollice in su"
          minLength: 1
          maxLength: 10
          pattern: '^.*$'

    PrivateConversationRequest:
      type: object
      description: Request to create private conversation
      required:
        - name
        - photo
      properties:
        name:
          type: string
          description: Username
          example: "james"
          minLength: 1
          maxLength: 100
          pattern: '^.*$'
        photo:
          type: string
          description: Base64 encoded photo content
          example: "fasfgasdkjfvashfadsfvhjfasfbashbvdfj--"
          minLength: 1
          maxLength: 1024
          pattern: '^.*$'

    GroupCreationRequest:
      type: object
      description: Request to create group
      required:
        - name
        - photo
      properties:
        name:
          type: string
          description: Group name
          example: "james"
          minLength: 1
          maxLength: 100
          pattern: '^.*$'
        photo:
          type: string
          description: Base64 encoded photo content
          example: "fasfgasdkjfvashfadsfvhjfasfbashbvdfj--"
          minLength: 1
          maxLength: 1024
          pattern: '^.*$'

    GroupNameRequest:
      type: object
      description: Request to change group name
      required:
        - name
      properties:
        name:
          type: string
          description: New group name
          example: "james"
          minLength: 1
          maxLength: 100
          pattern: '^.*$'

    GroupPhotoRequest:
      type: object
      description: Request to change group photo
      required:
        - photo
      properties:
        photo:
          type: string
          description: Base64 encoded photo content
          example: "fasfgasdkjfvashfadsfvhjfasfbashbvdfj--"
          minLength: 1
          maxLength: 1024
          pattern: '^.*$'

    GenericResponse:
      type: object
      description: Generic response
      required:
        - code
        - response
      properties:
        code:
          type: integer
          description: Response code
          example: 200
          minLength: 1
          maxLength: 1024
          minimum: 200
          maximum: 299
        response:
          type: string
          description: Response message
          example: "Success"
          minLength: 1
          maxLength: 1024
          pattern: '^.*$'

    GenericError:
      type: object
      description: Error response
      required:
        - errorCode
        - error
      properties:
        errorCode:
          type: integer
          description: Error code
          example: 500
          minLength: 1
          maxLength: 1024
          minimum: 300
          maximum: 599
        error:
          type: string
          description: Error message
          pattern: '^.*$'
          example: "Error occurred"
          minLength: 1
          maxLength: 1024
          
    idFromNameResponse:
      type: object
      description: response of idFromNameFunction
      required:
        - id
      properties:
        id:
          type: integer
          description: userID
          example: 200
          minLength: 1
          maxLength: 1024
          minimum: 200
          maximum: 299
    
    LoginResponse:
      type: object
      description: Generic response
      required:
        - code
        - userid
        - response
      properties:
        code:
          type: integer
          description: Response code
          example: 200
          minLength: 1
          maxLength: 1024
          minimum: 200
          maximum: 299
        userid:
          type: integer
          description: Id of the user logged
          example: 200
          minLength: 1
          maxLength: 1024
          minimum: 1
          maximum: 1024
        response:
          type: string
          description: Response message
          example: "Success"
          minLength: 1
          maxLength: 1024
          pattern: '^.*$'
